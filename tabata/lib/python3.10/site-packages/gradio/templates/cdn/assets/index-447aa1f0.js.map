{"version":3,"file":"index-447aa1f0.js","sources":["../../../../js/uploadbutton/shared/UploadButton.svelte","../../../../js/uploadbutton/static/StaticUploadButton.svelte","../../../../js/uploadbutton/interactive/InteractiveUploadButton.svelte","../../../../js/uploadbutton/index.svelte","../../../../js/app/src/components/UploadButton/index.ts"],"sourcesContent":["<script lang=\"ts\">\n\timport { BaseButton } from \"@gradio/button/static\";\n\timport { createEventDispatcher } from \"svelte\";\n\timport type { FileData } from \"@gradio/upload\";\n\n\texport let elem_id = \"\";\n\texport let elem_classes: string[] = [];\n\texport let visible = true;\n\texport let file_count: string;\n\texport let file_types: string[] = [];\n\texport let include_file_metadata = true;\n\texport let size: \"sm\" | \"lg\" = \"lg\";\n\texport let scale: number | null = null;\n\texport let min_width: number | undefined = undefined;\n\texport let variant: \"primary\" | \"secondary\" | \"stop\" = \"secondary\";\n\texport let label: string;\n\texport let disabled = false;\n\n\tlet hidden_upload: HTMLInputElement;\n\tconst dispatch = createEventDispatcher();\n\tlet accept_file_types: string | null;\n\tif (file_types == null) {\n\t\taccept_file_types = null;\n\t} else {\n\t\tfile_types = file_types.map((x) => {\n\t\t\tif (x.startsWith(\".\")) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\treturn x + \"/*\";\n\t\t});\n\t\taccept_file_types = file_types.join(\", \");\n\t}\n\n\tfunction openFileUpload(): void {\n\t\thidden_upload.click();\n\t}\n\n\tfunction loadFiles(files: FileList): void {\n\t\tlet _files: File[] = Array.from(files);\n\t\tif (!files.length) {\n\t\t\treturn;\n\t\t}\n\t\tif (file_count === \"single\") {\n\t\t\t_files = [files[0]];\n\t\t}\n\t\tvar all_file_data: (FileData | File)[] = [];\n\t\t_files.forEach((f, i) => {\n\t\t\tall_file_data[i] = include_file_metadata\n\t\t\t\t? {\n\t\t\t\t\t\tname: f.name,\n\t\t\t\t\t\tsize: f.size,\n\t\t\t\t\t\tdata: \"\",\n\t\t\t\t\t\tblob: f\n\t\t\t\t  }\n\t\t\t\t: f;\n\t\t\tif (\n\t\t\t\tall_file_data.filter((x) => x !== undefined).length === files.length\n\t\t\t) {\n\t\t\t\tdispatch(\n\t\t\t\t\t\"load\",\n\t\t\t\t\tfile_count == \"single\" ? all_file_data[0] : all_file_data\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction loadFilesFromUpload(e: Event): void {\n\t\tconst target = e.target as HTMLInputElement;\n\t\tif (!target.files) {\n\t\t\treturn;\n\t\t}\n\t\tloadFiles(target.files);\n\t}\n\n\tfunction clearInputValue(e: Event): void {\n\t\tconst target = e.target as HTMLInputElement;\n\t\tif (target.value) target.value = \"\";\n\t}\n</script>\n\n<input\n\tclass=\"hide\"\n\taccept={accept_file_types}\n\ttype=\"file\"\n\tbind:this={hidden_upload}\n\ton:change={loadFilesFromUpload}\n\ton:click={clearInputValue}\n\tmultiple={file_count === \"multiple\" || undefined}\n\twebkitdirectory={file_count === \"directory\" || undefined}\n\tmozdirectory={file_count === \"directory\" || undefined}\n\tdata-testid=\"{label}-upload-button\"\n/>\n\n<BaseButton\n\t{size}\n\t{variant}\n\t{elem_id}\n\t{elem_classes}\n\t{visible}\n\ton:click={openFileUpload}\n\t{scale}\n\t{min_width}\n\t{disabled}\n>\n\t<slot />\n</BaseButton>\n\n<style>\n\t.hide {\n\t\tdisplay: none;\n\t}\n</style>\n","<script lang=\"ts\">\n\timport { createEventDispatcher, tick, getContext } from \"svelte\";\n\timport type { FileData } from \"@gradio/upload\";\n\timport UploadButton from \"../shared\";\n\timport { upload_files as default_upload_files } from \"@gradio/client\";\n\timport { blobToBase64 } from \"@gradio/upload\";\n\timport { _ } from \"svelte-i18n\";\n\n\texport let elem_id = \"\";\n\texport let elem_classes: string[] = [];\n\texport let visible = true;\n\texport let label: string;\n\texport let value: null | FileData;\n\texport let file_count: string;\n\texport let file_types: string[] = [];\n\texport let root: string;\n\texport let size: \"sm\" | \"lg\" = \"lg\";\n\texport let scale: number | null = null;\n\texport let min_width: number | undefined = undefined;\n\texport let variant: \"primary\" | \"secondary\" | \"stop\" = \"secondary\";\n\n\tconst upload_files =\n\t\tgetContext<typeof default_upload_files>(\"upload_files\") ??\n\t\tdefault_upload_files;\n\n\tasync function handle_upload({\n\t\tdetail\n\t}: CustomEvent<FileData>): Promise<void> {\n\t\tvalue = detail;\n\t\tawait tick();\n\t\tlet files = (Array.isArray(detail) ? detail : [detail]).map(\n\t\t\t(file_data) => file_data.blob!\n\t\t);\n\n\t\tupload_files(root, files).then(async (response) => {\n\t\t\tif (response.error) {\n\t\t\t\t(Array.isArray(detail) ? detail : [detail]).forEach(\n\t\t\t\t\tasync (file_data, i) => {\n\t\t\t\t\t\tfile_data.data = await blobToBase64(file_data.blob!);\n\t\t\t\t\t\tfile_data.blob = undefined;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t(Array.isArray(detail) ? detail : [detail]).forEach((file_data, i) => {\n\t\t\t\t\tif (response.files) {\n\t\t\t\t\t\tfile_data.orig_name = file_data.name;\n\t\t\t\t\t\tfile_data.name = response.files[i];\n\t\t\t\t\t\tfile_data.is_file = true;\n\t\t\t\t\t\tfile_data.blob = undefined;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tdispatch(\"change\", value);\n\t\t\tdispatch(\"upload\", detail);\n\t\t});\n\t}\n\n\tconst dispatch = createEventDispatcher<{\n\t\tchange: FileData | null;\n\t\tupload: FileData;\n\t}>();\n</script>\n\n<UploadButton\n\t{elem_id}\n\t{elem_classes}\n\t{visible}\n\t{file_count}\n\t{file_types}\n\t{size}\n\t{scale}\n\t{min_width}\n\tdisabled\n\t{variant}\n\t{label}\n\ton:click\n\ton:load={handle_upload}\n>\n\t{$_(label)}\n</UploadButton>\n","<script lang=\"ts\">\n\timport { createEventDispatcher, tick, getContext } from \"svelte\";\n\timport type { FileData } from \"@gradio/upload\";\n\timport UploadButton from \"../shared\";\n\timport { upload_files as default_upload_files } from \"@gradio/client\";\n\timport { blobToBase64 } from \"@gradio/upload\";\n\timport { _ } from \"svelte-i18n\";\n\n\texport let elem_id = \"\";\n\texport let elem_classes: string[] = [];\n\texport let visible = true;\n\texport let label: string;\n\texport let value: null | FileData;\n\texport let file_count: string;\n\texport let file_types: string[] = [];\n\texport let root: string;\n\texport let size: \"sm\" | \"lg\" = \"lg\";\n\texport let scale: number | null = null;\n\texport let min_width: number | undefined = undefined;\n\texport let variant: \"primary\" | \"secondary\" | \"stop\" = \"secondary\";\n\n\tconst upload_files =\n\t\tgetContext<typeof default_upload_files>(\"upload_files\") ??\n\t\tdefault_upload_files;\n\n\tasync function handle_upload({\n\t\tdetail\n\t}: CustomEvent<FileData>): Promise<void> {\n\t\tvalue = detail;\n\t\tawait tick();\n\t\tlet files = (Array.isArray(detail) ? detail : [detail]).map(\n\t\t\t(file_data) => file_data.blob!\n\t\t);\n\n\t\tupload_files(root, files).then(async (response) => {\n\t\t\tif (response.error) {\n\t\t\t\t(Array.isArray(detail) ? detail : [detail]).forEach(\n\t\t\t\t\tasync (file_data, i) => {\n\t\t\t\t\t\tfile_data.data = await blobToBase64(file_data.blob!);\n\t\t\t\t\t\tfile_data.blob = undefined;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t(Array.isArray(detail) ? detail : [detail]).forEach((file_data, i) => {\n\t\t\t\t\tif (response.files) {\n\t\t\t\t\t\tfile_data.orig_name = file_data.name;\n\t\t\t\t\t\tfile_data.name = response.files[i];\n\t\t\t\t\t\tfile_data.is_file = true;\n\t\t\t\t\t\tfile_data.blob = undefined;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tdispatch(\"change\", value);\n\t\t\tdispatch(\"upload\", detail);\n\t\t});\n\t}\n\n\tconst dispatch = createEventDispatcher<{\n\t\tchange: FileData | null;\n\t\tupload: FileData;\n\t}>();\n</script>\n\n<UploadButton\n\t{elem_id}\n\t{elem_classes}\n\t{visible}\n\t{file_count}\n\t{file_types}\n\t{size}\n\t{scale}\n\t{min_width}\n\t{variant}\n\t{label}\n\ton:click\n\ton:load={handle_upload}\n>\n\t{$_(label)}\n</UploadButton>\n","<script lang=\"ts\">\n\timport Static from \"./static\";\n\timport Interactive from \"./interactive\";\n\n\timport type { FileData } from \"@gradio/upload\";\n\n\texport let elem_id = \"\";\n\texport let elem_classes: string[] = [];\n\texport let visible = true;\n\texport let label: string;\n\texport let value: null | FileData;\n\texport let file_count: string;\n\texport let file_types: string[] = [];\n\texport let root: string;\n\texport let size: \"sm\" | \"lg\" = \"lg\";\n\texport let scale: number | null = null;\n\texport let min_width: number | undefined = undefined;\n\texport let mode: \"static\" | \"dynamic\" = \"dynamic\";\n\texport let variant: \"primary\" | \"secondary\" | \"stop\" = \"secondary\";\n</script>\n\n{#if mode === \"static\"}\n\t<Static\n\t\tbind:value\n\t\t{elem_id}\n\t\t{elem_classes}\n\t\t{visible}\n\t\t{file_count}\n\t\t{file_types}\n\t\t{size}\n\t\t{scale}\n\t\t{min_width}\n\t\t{variant}\n\t\t{label}\n\t\t{root}\n\t\ton:click\n\t\ton:upload\n\t\ton:change\n\t/>\n{:else}\n\t<Interactive\n\t\tbind:value\n\t\t{elem_id}\n\t\t{elem_classes}\n\t\t{visible}\n\t\t{file_count}\n\t\t{file_types}\n\t\t{size}\n\t\t{scale}\n\t\t{min_width}\n\t\t{variant}\n\t\t{label}\n\t\t{root}\n\t\ton:click\n\t\ton:upload\n\t\ton:change\n\t/>\n{/if}\n","export { default as Component } from \"@gradio/uploadbutton\";\nexport const modes = [\"static\", \"dynamic\"];\n"],"names":["ctx","insert","target","input","anchor","clearInputValue","e","elem_id","$$props","elem_classes","visible","file_count","file_types","include_file_metadata","size","scale","min_width","variant","label","disabled","hidden_upload","dispatch","createEventDispatcher","accept_file_types","x","openFileUpload","loadFiles","files","_files","all_file_data","f","i","loadFilesFromUpload","$$value","t_value","dirty","set_data","t","value","root","upload_files","getContext","default_upload_files","handle_upload","detail","$$invalidate","tick","file_data","response","blobToBase64","mode","modes"],"mappings":"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"}